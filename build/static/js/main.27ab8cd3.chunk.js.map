{"version":3,"sources":["logo.svg","components/webcam/WebcamComponent.js","service/MaxTransferService.js","views/CamView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WebcamComponent","setRef","webcam","screenshotImage","getScreenshot","audio","style","width","ref","this","screenshotFormat","React","Component","MaxTransferService","getStyledimage","image","a","Promise","resolve","reject","formData","FormData","set","axios","post","responseType","headers","then","response","reader","window","FileReader","readAsDataURL","data","onload","imageDataUrl","result","e","console","log","styles","gridStyle","backgroundColor","buttonStyle","cardStyle","height","webcamStyle","margin","display","previewStyle","maxWidth","marginTop","CamView","props","postGetStyledImage","target","id","current","imgVal","screenShotBlob","dataURLtoBlob","setState","isLoadingImage","styleImg","service","styledImg","dataurl","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","type","renderPreviewImages","className","src","onClick","createRef","state","active","spinner","loading","color","text","alt","App","fontFamily","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27ab8cd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport Webcam from 'react-webcam';\n\nexport default class WebcamComponent extends React.Component {\n\n    setRef = webcam => {\n        this.webcam = webcam;\n    };\n\n    screenshotImage = () => {\n        let screenShot = this.webcam.getScreenshot();\n        return screenShot\n    };\n\n    render() {\n        return (\n            <div>\n                <Webcam audio={false} style={{width:\"100%\"}} ref={this.setRef} screenshotFormat=\"image/jpeg\"/>\n            </div>\n        );\n    }\n}\n","import axios from 'axios';\nconst url = \"http://max-fast-neural-style-transfer.max.us-south.containers.appdomain.cloud/model/predict\";\n//const url = \"http://localhost:3001/users\";\n\nexport default class MaxTransferService {\n\n    getStyledimage = async (image, style) => {\n        return new Promise(async (resolve, reject) => {\n            try {\n                //let newImg = `data:image/jpeg;base64,${image}`;\n                let formData = new FormData();\n                formData.set('image', image);\n                axios.post(`${url}?model=${style}`, formData, {\n                    responseType: 'blob',\n                    headers: {\n                        'Content-Type': 'multipart/form-data', // do not forget this\n                        'accept': 'application/json',\n                    }\n                }).then((response) => {\n                    var reader = new window.FileReader();\n                    reader.readAsDataURL(response.data);\n                    reader.onload = function() {\n                        var imageDataUrl = reader.result;\n                        resolve(imageDataUrl);\n                    }\n                });\n\n            } catch (e) {\n                console.log(\"Errorororo\");\n                console.log(e);\n                reject(e);\n            }\n        } );\n\n    }\n}","import React from 'react'\nimport WebcamComponent from \"../components/webcam/WebcamComponent\";\nimport MaxTransferService from '../service/MaxTransferService';\nimport './camViewStyles.css';\nimport ClockLoader from \"react-spinners/ClipLoader\";\nimport LoadingOverlay from 'react-loading-overlay';\n\nconst styles= {\n    gridStyle:{\n        backgroundColor:\"#282c34\"\n    },\n    buttonStyle:{\n        width:\"100%\"\n    },\n    cardStyle:{\n        backgroundColor:\"#282c34\",\n        height:\"100%\"\n    },\n    webcamStyle:{\n        margin:\"auto\",\n        display:\"block\"\n    },\n    previewStyle:{\n        maxWidth:\"70%\",\n        marginTop:\"4px\"\n    },\n}\n\nexport default class CamView extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.webcam = React.createRef();\n        this.service = new MaxTransferService();\n\n        this.state = {\n            styleImg:null,\n            isLoadingImage: false,\n        }\n    }\n\n    postGetStyledImage = async (e) => {\n        let style = e.target.id;\n        let imgVal = await this.webcam.current.screenshotImage();\n        let screenShotBlob = this.dataURLtoBlob(imgVal)\n        this.setState({\n            isLoadingImage: true,\n            styleImg: imgVal\n        })\n        let styledImg = await this.service.getStyledimage(screenShotBlob, style);\n        this.setState({\n            styleImg:styledImg,\n            isLoadingImage: false\n        })\n    }\n\n    // Jep. This is for parsing the webcam data.\n    dataURLtoBlob = (dataurl) => {\n        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        while(n--){\n            u8arr[n] = bstr.charCodeAt(n);\n        }\n        return new Blob([u8arr], {type:mime});\n    }\n\n    renderPreviewImages = () => {\n        return (\n            <div>\n                <img id={\"candy\"} className={\"imagePreview\"} src={process.env.PUBLIC_URL + '/candy.jpg'} onClick={this.postGetStyledImage}></img>\n                <img id={\"mosaic\"} className={\"imagePreview\"}  src={process.env.PUBLIC_URL + '/mosaic.jpg'} onClick={this.postGetStyledImage}></img>\n                <img id={\"rain_princess\"} className={\"imagePreview\"}  src={process.env.PUBLIC_URL + '/rain-princess-cropped.jpg'} onClick={this.postGetStyledImage}></img>\n                <img id={\"udnie\"} className={\"imagePreview\"}  src={process.env.PUBLIC_URL + '/udnie.jpg'}  onClick={this.postGetStyledImage}></img>\n            </div>\n        )\n    }\n\n\n    render() {\n        return(\n            <div>\n                <div className=\"bx--grid\" style={styles.gridStyle}>\n                    <div className=\"bx--row\">\n                        <div className=\"bx--col-lg-7\">\n                            <div style={styles.cardStyle}>\n                                <WebcamComponent style={styles.webcamStyle} ref={this.webcam}/>\n                            </div>\n                        </div>\n                        <div className=\"bx--col-lg-2\" style={styles.previewStyle}>\n                            {this.renderPreviewImages()}\n                        </div>\n                        <div className=\"bx--col-lg-7\">\n                                <div style={styles.cardStyle}>\n                                    <LoadingOverlay\n                                        active={this.state.isLoadingImage}\n                                        spinner={<div><br/> <ClockLoader loading={\"true\"} color={\"#0043ce\"}/></div>}\n                                        text='Your image is being created'\n                                    >\n                                        {this.state.styleImg ? <img alt={\"\"} src={this.state.styleImg ? this.state.styleImg : \"\"}/> : \"\"}\n                                    </LoadingOverlay>\n                                </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CamView from \"./views/CamView\";\nimport './index.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <br/>\n      <div style={{height:\"24%\",color:\"white\", fontFamily: \"IBM Plex Sans, Helvetica Neue, Arial, sans-serif\"}}>\n        <h1>Fast style transfer</h1>\n        <p>Click on one of the paintings to get a snapshot in that style</p>\n      </div>\n      <CamView/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}